========
Comment
========
; comment
---
(script (line (comment)))

========
Define
========
>DefineKey define _ + 3h f[29 j] value *
---
(script (line (define (define_key) (define_value))))

========
Label
========
# label
---
(script (line (label (label_id))))

========
Error: space after command symbol
========
@ command
---
(script (line (command (ERROR) (command_id))))

========
Command with no parameters
========
@command
---
(script (line (command (command_id))))

========
Command with no parameters, whitespace before
========
 @command
---
(script (line (command (command_id))))

========
Command with no parameters, tab before
========
  @command
---
(script (line (command (command_id))))

========
Command with no parameters, tabs and spaces before
========
       @command
---
(script (line (command (command_id))))

========
Command with no parameters, wrapped in whitespace
========
       @command             
---
(script (line (command (command_id))))

========
Command with no parameters, trailing space
========
@command 
---
(script (line (command (command_id))))

========
Command with no parameters, multiple trailing spaces
========
@command        
---
(script (line (command (command_id))))

========
Command with no parameters, trailing tab
========
@command  
---
(script (line (command (command_id))))

========
Command with no parameters, trailing tabs and spaces
========
@command            
---
(script (line (command (command_id))))

========
Command with positive int paramater
========
@command 1
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with negative int paramater
========
@command -1
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with positive float parameter and no fraction
========
@command 1.
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with positive float parameter and with fraction
========
@command 1.10
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with negative float parameter and no fraction
========
@command -1.
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with negative float parameter and with fraction
========
@command -1.10
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with bool parameter and positive value
========
@command true
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with bool parameter and negative value
========
@bgm false
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with string parameter
========
@command hello$co\:mma"d"
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with quoted string nameless parameter
========
@command "hello grizzly"
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with quoted string nameless parameter with escaped quotes in the value
========
@command "hello \"grizzly\""
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with set expression in nameless parameter
========
@set choice="moe"
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with named literal value
========
@command hello.grizzly
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with string array
========
@command one,two,three
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with int array
========
@command 1,2,3
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with bool array
========
@command true,false,true
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))))

========
Command with named parameter and string value
========
@command hi:grizzly
---
(script (line (command (command_id) (command_param (command_param_id) (command_param_value)))))

========
Command with named parameter and int value
========
@command hi:1
---
(script (line (command (command_id) (command_param (command_param_id) (command_param_value)))))

========
Command with named parameter and bool value
========
@command hi:true
---
(script (line (command (command_id) (command_param (command_param_id) (command_param_value)))))

========
Command with multiple parameters #1
========
@command 1 in:forest danger:true
---
(script (line (command (command_id) (command_nameless_param (command_param_value)) (command_param (command_param_id) (command_param_value)) (command_param (command_param_id) (command_param_value)) )))

========
Command with multiple parameters #2
========
@char 1 pos:0.25,-0.75 look:right
---
(script (line (command (command_id) (command_nameless_param (command_param_value)) (command_param (command_param_id) (command_param_value)) (command_param (command_param_id) (command_param_value)) )))

========
Generic text with inlined commands
========
text[i] example[command 1 danger:true] more text here [act danger:false true:false]
---
(script (line (generic_text (inlined_command (command_id)) (inlined_command (command_id) (command_nameless_param (command_param_value)) (command_param (command_param_id) (command_param_value))) (inlined_command (command_id) (command_param (command_param_id) (command_param_value)) (command_param (command_param_id) (command_param_value))))))

========
Two lines with commands
========
@action1
@action2
---
(script (line (command (command_id))) (line (command (command_id))))

========
Command and generic text on a new line
========
@printer
Massa ut elementum.
---
(script (line (command (command_id))) (line (generic_text)))

========
Command with a parameter and generic text on a new line
========
@printer Wide
Integer
---
(script (line (command (command_id) (command_nameless_param (command_param_value)))) (line (generic_text)))

========
Expression
========
{ Abs(a, d) + 12 - 1 / -230.0 + "Lol ipsum" }
---
(script (line (generic_text (expression))))

========
Expressions inside a generic text line
========
actor: Loreim ipsu,{ Abs(a, d) + 12 - 1 / -230.0 + "Lol ipsum" } doler sit amen {¯\_(ツ)_/¯}.
---
(script (line (generic_text (expression) (expression))))

========
Expression instead of nameless parameter value
========
@command {x > 0}
---
(script (line (command (command_id) (command_nameless_param (command_param_value (expression))))))

========
Expression blended with nameless parameter value
========
@command sdf{x > 0}df
---
(script (line (command (command_id) (command_nameless_param (command_param_value (expression))))))

========
Expression instead of named parameter value
========
@command param:{x > 0}
---
(script (line (command (command_id) (command_param (command_param_id) (command_param_value (expression))))))

========
Expressions inside a named parameter value wrapped in quotes
========
@print text:"{a} < {b}"
---
(script (line (command (command_id) (command_param (command_param_id) (command_param_value (expression) (expression))))))

========
Expressions blended with named parameter value
========
@command param:32r2f,df{x > 0},d.{Abs(0) + 12.24 > 0}ff
---
(script (line (command (command_id) (command_param (command_param_id) (command_param_value (expression) (expression))))))

========
Expressions instead of nameless parameter and a quoted parameter
========
@print {remark} if:remark=="Saying \\"Stop { "the" } car\\" was a mistake."
---
(script (line (command (command_id) (command_nameless_param (command_param_value (expression))) (command_param (command_param_id) (command_param_value (expression))))))

========
Escaped braces inside generic text
========
bibe\{abu\}nt @ >ip#s;um< @ \[sdff j9dj\]
---
(script (line (generic_text)))

========
Errors inside generic text
========
bibe{ab{cndum dui dolor tincidu{nt [s[fa]sdf [
---
(script (line (generic_text)) (ERROR (UNEXPECTED '{')))

========
Errors when defining control lines
========
#
>
@
---
(script (ERROR) (ERROR) (ERROR))
